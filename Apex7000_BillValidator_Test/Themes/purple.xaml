<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- This storyboard will make the image grow to 1.06 its size in 0.2 seconds -->
    <Storyboard x:Key="GrowStoryboard" >
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleX" 
        To="1.1" Duration="0:0:.1" BeginTime="0:0:0.5" AutoReverse="True" RepeatBehavior="2x" />
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" 
        To="1.1" Duration="0:0:.1" BeginTime="0:0:0.5" AutoReverse="True" RepeatBehavior="2x" />
    </Storyboard>

    <!-- Float and fade lable -->
    <Storyboard x:Key="FloatAndFade" >
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
            <SplineDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
            <SplineDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
            <SplineDoubleKeyFrame KeyTime="0:0:2" Value="1"/>
            <SplineDoubleKeyFrame KeyTime="0:0:4" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="imgButton_withText" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <Style x:Key="textBlock_largeFont" TargetType="TextBlock">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style x:Key="GroupHeader_TextBlock" TargetType="TextBlock">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style x:Key="GroupHeader_Label" TargetType="Label">
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="FontWeight" Value="Light"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border                        
                        Background="White"
                        BorderThickness="1"
                        BorderBrush="#FF0F0E0E">

                        <!-- ContentPresenter properties. Set the content source as the content from each control define below -->
                        <ContentPresenter ContentSource="Content" 
                                          HorizontalAlignment="Right"
                                          VerticalAlignment="Center"
                                          TextBlock.FontSize="10" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="button_flat_round" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Height" Value="32"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <!-- Content handles within a border -->
                    <Border x:Name="bdr" CornerRadius="12" Margin="3" BorderThickness="1" BorderBrush="LightGray" Background="{TemplateBinding Background}"
>
                        <!-- ContentPresenter properties. Set the content source as the content from each control define below -->
                        <ContentPresenter ContentSource="Content" 
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          TextBlock.FontSize="14" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource GrowStoryboard}" />
                </Trigger.EnterActions>
            </Trigger>
        </Style.Triggers>
    </Style>
 
    <Style x:Key="combo_flat"  TargetType="{x:Type ComboBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Margin" Value="0,10,0,0"/>
        <Setter Property="Width" Value="85" />
        <Setter Property="Height" Value="20"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
    </Style>

    <Style x:Key="textbox_flat"  TargetType="{x:Type TextBox}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="MinWidth" Value="50"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Margin" Value="0,10,0,0"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel LastChildFill="true">
                        <Border Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                                    ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
                            <TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white">
                            </TextBlock>
                        </Border>
                        <AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
                            <Border BorderBrush="red" BorderThickness="1" />
                        </AdornedElementPlaceholder>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>